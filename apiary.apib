FORMAT: 1A

# Cards Against Ocaml

This document specifies the APIs for Cards Against OCaml. The server for the game should implement these interfaces
exactly. Click on each to get more information about what the JSON should look like

Note that a common trend through all the API's is the requirement of a username parameter. If you fail to provide this
parameter then the API call will return a 401, except in the case of login. Login adds the user to the server for the
game.

A cards against humanity game is split into three main phases: pregame, playing, and judging. During pregame, people
are meant to be logging in. Once all users are logged in players begin the game. During the playing phase, players are
presented with a black card and they must play a white card. During the judging phaes, the card czar picks the white card
that he feels fits the black card best. The game is won when one player wins 10 black cards.

# Group Authentication
Relating to calls about authentication.
## Login [/user/login]
### Log in to the server [POST]
The user making this call will need to submit a username, through the request header, that they shall use for the game that they will join.

+ Request (application/json)
    + Header

            username: "acidic"

+ Response 200 (No Content)

## Quit [/user/quit]
### Quit out of the server [DELETE]
The user making this call will need to pass in the username that they wish to remove from the game.

+ Request (application/json)
    + Header

            username: "acidic"

+ Response 200 (No Content)

# Group Timing
Relating to calls about timing that are frequently made to the server
## Heartbeat [/time/heartbeat]
### Send a heartbeat [POST]
The user making this call will need to pass in the username of the given user. Every user should make this call
at least once every 5 seconds, or the server may deem the player inactive.

+ Request (application/json)
    + Header

            username: "acidic"

+ Response 200 (No Content)

## Timer [/time/timer{?pause}]

+ Parameters
    + pause (boolean, optional) - parameter for telling if we are pausing or playing

### Get Round Timer [GET]
The user making this call will need to pass in the username of the given user. The response should return the time that
the user has left in the round in seconds as a parameter in the body of the response

+ Request (application/json)
    + Header

            username: "acidic"

+ Response 200 (application/json)
    
        [
            {
               "time": 20,
            }
        ]

### Pause/Play Game [POST]
The user making this call can either pause or start the timer

+ Request (application/json)
    + Header

            username: "acidic"
            
+ Response 200 (application/json)

# Group Game State
Relating to calls to get the current world state.

## State [/state/getState]
### Get Current State [GET]
The user making this call will need to pass in the username of the given user. The response will return a json
object with the current game state (including current black card, current phase, submitted white cards if
judging phase, players who have not submitted, scores, Card Czar)

+ Request (application/json)
    + Header

            username: "acidic"

+ Response 200 (application/json)

        [
            {
                "black": "Current Issue _",
                "phase": "Playing",
                "submitted": ["pac man", "derp"],
                "waitingPlayers": ["p3"],
                "scores": [12, 14, 15, 19],
                "czar": "acidic"
            }
        ]

//Past winning cards list (black and white associated together)
## Past Wins [/state/pastWins]
### Get Previously Winning Pairs [GET]

+Response 200 (application/json)
    +Body

        [
            {
                "winning pairs": [("white1", "black2"),("white1", "black2")],
            }
        ]

## Hand [/state/hand]
### Get hand of current player [GET]

+ Request (application/json)
    + Header

            username: "acidic"

+ Response 200 (application/json)

        [
            {
                "currentHand": ["white1", "white1","white1","white1","white1","white1","white1","white1","white1","white1"],
            }
        ]

## Start [/state/start]
### Trigger the start of a game or restart [POST]

+ Response 200 (No Content)

# Group Playing
Relating to calls that a non-card czar player would make during the play phase.

##  Play [/play]
### Play a White Card [GET]
The user making this call needs to pass in his username. That user then plays the specified white card for
the given round. This call is final, once it's made the user cannot play a different white card that round.

# Group Judging
Relating to calls that the card czar would be making

##  Judge [/judge]
### Pick White Card [GET]
The user making this call needs to pass in his username. This call will only be accepted if the username matches
the username of the current card czar. Once a card is selected the decision is final.



